import { Injectable } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { ConfigService } from '@nestjs/config';
import { Telegraf, Scenes } from 'telegraf';
import { Model } from 'mongoose';

import { User } from './schemas/user.schema';
import { Product } from './schemas/product.schema';

import { TelegramService } from './telegram/telegram.service';
import { ScrapersService } from './scrapers/scrapers.service';
import { TContext } from './telegram/telegram.module';

import {
  MAIN_COMMANDS,
  OPERATION_COMMANDS,
  SYSTEM_COMMANDS
} from './common/constants/commands.constant';
import { MARKETS } from './common/constants/markets.constant';

@Injectable()
export class AppService {
  constructor(
    @InjectModel(User.name) private readonly userModel: Model<User>,
    @InjectModel(Product.name) private readonly productModel: Model<Product>,
    private readonly scrapersService: ScrapersService,
    private readonly telegramService: TelegramService,
    private readonly configService: ConfigService
  ) {
    this.telegramService.setBotMyCommands([
      ...MAIN_COMMANDS.commands,
      ...OPERATION_COMMANDS.commands
    ]);

    this.telegramService.setBotCommand('start', (ctx: TContext) => this.handlerCommandStart(ctx));
    this.telegramService.setBotCommand('help', (ctx: TContext) => this.handlerCommandHelp(ctx));
    this.telegramService.setBotCommand('about', (ctx: TContext) => this.handlerCommandAbout(ctx));
    this.telegramService.setBotCommand('quit', (ctx: TContext) => this.handlerCommandQuit(ctx));
    this.telegramService.setBotCommand('notice', (ctx: any) => this.handlerCommandNotice(ctx));
    this.telegramService.setBotCommand('admin', (ctx: any) => this.handlerCommandAdmin(ctx));
    this.telegramService.setBotCommand('update', (ctx: any) => this.handlerCommandUpdate(ctx));
    this.telegramService.setBotCommand('donate', (ctx: TContext) => this.handlerCommandDonate(ctx));
    this.telegramService.setBotCommand('statistic', (ctx: TContext) =>
      this.handlerCommandStatistic(ctx)
    );

    this.initSceneAdmin('admin');
    this.initSceneNotice('notice');
    this.initSceneUpdate('update');

    this.telegramService.setOnMessage((ctx: any) => this.onMessage(ctx));

    this.telegramService.setOn–°allbackQuery((ctx: any) => this.on–°allbackQuery(ctx));
  }

  createWebhookTelegramBot() {
    return this.telegramService.botLaunch();
  }

  statusTelegramBot(processUpdate: Record<string, any>): Record<string, any> {
    return processUpdate;
  }

  async findAllCategory(query: Record<string, any>): Promise<Record<string, any>[]> {
    const { market = '' } = query;
    try {
      return await this.productModel.aggregate([
        { $match: { market: market } },
        { $group: { _id: { categoryName: '$categoryName', categoryIcon: '$categoryIcon' } } },
        {
          $project: { categoryName: '$_id.categoryName', categoryIcon: '$_id.categoryIcon', _id: 0 }
        }
      ]);
    } catch (err) {
      throw new Error(err.message);
    }
  }

  async findAllProduct(query: Record<string, any>): Promise<Record<string, any>[]> {
    const { market = '', category = '' } = query;
    try {
      const products = await this.productModel
        .find({ market: market, categoryName: category })
        .select({
          _id: 1,
          title: 1,
          img: 1,
          pricePer: 1,
          priceTitle: 1,
          market: 1,
          categoryName: 1
        })
        .lean()
        .exec();

      return products.map(product => {
        return {
          id: product._id,
          img: product.img,
          title: product.title,
          pricePer: product.pricePer,
          priceTitle: product.priceTitle,
          market: product.market,
          categoryName: product.categoryName
        };
      });
    } catch (err) {
      throw new Error(err.message);
    }
  }

  private groupByMarketAndCategory(data: Record<string, any>) {
    const marketGroups = data.reduce((acc: any, item: any) => {
      if (!acc[item.market]) {
        acc[item.market] = {};
      }
      if (!acc[item.market][item.categoryName]) {
        acc[item.market][item.categoryName] = [];
      }
      acc[item.market][item.categoryName].push(item);
      return acc;
    }, {});

    const result = Object.keys(marketGroups).map(market => {
      const categories = Object.keys(marketGroups[market]).map(category => ({
        categoryName: category,
        products: marketGroups[market][category]
      }));
      return {
        market: market,
        categories: categories
      };
    });

    return result;
  }

  private async onMessage(ctx: any) {
    if (ctx?.update?.message?.text === '‚ùì Help') {
      return await this.handlerCommandHelp(ctx);
    } else if (ctx?.update?.message?.text === 'üí∏ Donate') {
      return await this.handlerCommandDonate(ctx);
    } else if (ctx?.update?.message?.web_app_data) {
      return await this.handlerWebAppData(ctx);
    } else {
      return await ctx.replyWithHTML('‚úåÔ∏è –î—É–∂–µ —Ü—ñ–∫–∞–≤–æ, –∞–ª–µ —è –ø–æ–∫–∏ —â–æ –Ω–µ –≤–º—ñ—é –≤–µ—Å—Ç–∏ —Ä–æ–∑–º–æ–≤—É!', {});
    }
  }

  private async on–°allbackQuery(ctx: any) {
    const callbackData = ctx.callbackQuery.data;

    switch (callbackData) {
      case 'quit:confirm:yes':
      case 'quit:confirm:cancel':
        return await this.handlerQuitConfirm(ctx);
      default:
        return await ctx.replyWithHTML('üí¢ <b>–£–ø—Å!</b> –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫!', {});
    }
  }

  private async initSceneAdmin(name: string) {
    const scene = new Scenes.BaseScene<any>(name);
    scene.enter(async ctx => {
      const message = [
        'üëå –î–æ–±—Ä–µ, –¥–∞–≤–∞–π—Ç–µ –æ—Ç—Ä–∏–º–∞—î–º–æ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞!\n\n',
        'üëâ –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Å–µ–∫—Ä–µ—Ç–Ω–∏–π –∫–ª—é—á'
      ];

      ctx.replyWithHTML(message.join(''));
    });

    scene.on<any>('text', async (ctx: any) => {
      const secret = this.configService.get<string>('SECRET');
      ctx.session.secret = ctx.message.text;

      if (ctx.session.secret === secret) {
        const user = await this.userModel.findOneAndUpdate(
          { userID: ctx.userInfo.userID },
          { $set: { isAdmin: true } }
        );
        if (user && user?.isAdmin) {
          ctx.replyWithHTML('üëå –î–æ–±—Ä–µ, –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥–∞–Ω–æ!');
        } else {
          ctx.replyWithHTML('üí¢ <b>–£–ø—Å</b>, —É –ø—Ä–∞–≤–∞—Ö –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤—ñ–¥–º–æ–≤–ª–µ–Ω–æ!');
        }
      } else {
        ctx.replyWithHTML('üí¢ <b>–£–ø—Å</b>, —É –ø—Ä–∞–≤–∞—Ö –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤—ñ–¥–º–æ–≤–ª–µ–Ω–æ!');
      }

      ctx.scene.leave();
    });

    this.telegramService.registerBotScene(scene);
  }

  private async initSceneNotice(name: string) {
    const scene = new Scenes.BaseScene<any>(name);
    scene.enter(async ctx => {
      const user = await this.userModel.findOne({ userID: ctx.userInfo.userID });

      if (!user || !user?.isAdmin) {
        ctx.replyWithHTML('üí¢ <b>–£–ø—Å!</b> –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø–æ–≤–Ω–æ–≤–∞–∂–µ–Ω—å!');
        return ctx.scene.leave();
      }

      const message = [
        'üëå –î–æ–±—Ä–µ, –¥–∞–≤–∞–π—Ç–µ —Å—Ç–≤–æ—Ä–µ–º–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è!\n\n',
        'üëâ –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è'
      ];

      ctx.replyWithHTML(message.join(''));
    });

    scene.on<any>('text', async (ctx: any) => {
      ctx.session.message = ctx.message.text;

      try {
        const users = await this.userModel.find({}).select({ userID: 1 });
        users.forEach(async ({ userID }) => {
          try {
            await this.telegramService.sendMessage(userID, ctx.session.message);
          } catch (err) {
            console.error(err);
            if (err?.response?.error_code === 403) {
              await this.userModel.findOneAndDelete({ userID: userID });
            }
          }
        });
        ctx.replyWithHTML('üí™ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º.');
      } catch (err) {
        ctx.replyWithHTML(
          `üí¢ <b>–£–ø—Å!</b> –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫!. –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: <i>${err.message}</i>`
        );
      } finally {
        ctx.scene.leave();
      }
    });

    this.telegramService.registerBotScene(scene);
  }

  private async initSceneUpdate(name: string) {
    const scene = new Scenes.BaseScene<any>(name);
    scene.enter(async ctx => {
      const user = await this.userModel.findOne({ userID: ctx.userInfo.userID });

      if (!user || !user?.isAdmin) {
        ctx.replyWithHTML('üí¢ <b>–£–ø—Å!</b> –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø–æ–≤–Ω–æ–≤–∞–∂–µ–Ω—å!');
        return ctx.scene.leave();
      }

      const message = [
        `üëãüëãüëã <b><i>${ctx.userInfo.firstName}</i>, –º–æ—ó –≤—ñ—Ç–∞–Ω–Ω—è</b>!`,
        '\n\n',
        'üëå –î–æ–±—Ä–µ, –¥–∞–≤–∞–π—Ç–µ –æ–Ω–æ–≤–∏–º–æ –ø–µ—Ä–µ–ª—ñ–∫ —Ç–æ–≤–∞—Ä—ñ–≤!\n\n',
        'üëâ –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –º–∞–∫—Ä–µ—Ç –∑—ñ —Å–ø–∏—Å–∫—É.'
      ];

      ctx.replyWithHTML(message.join(''), {
        link_preview_options: { is_disabled: true },
        reply_markup: {
          inline_keyboard: [
            ...MARKETS.map(({ key, label }) => {
              return [
                {
                  text: label,
                  callback_data: JSON.stringify({
                    label: label,
                    cb: `update:market:${key}`
                  })
                }
              ];
            })
          ]
        }
      });
    });

    scene.on<any>('callback_query', async (ctx: any) => {
      const { label, cb } = JSON.parse(ctx.callbackQuery.data);

      ctx.session.callbackdata = cb;

      const user = await this.userModel.findOne({ userID: ctx.userInfo.userID });

      if (!user || !user?.isAdmin) {
        ctx.replyWithHTML('üí¢ <b>–£–ø—Å!</b> –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø–æ–≤–Ω–æ–≤–∞–∂–µ–Ω—å!');
        return ctx.scene.leave();
      }

      switch (ctx.session.callbackdata) {
        case 'update:market:atb':
          this.scrapersService.handleAtbMarketScrape();
          await ctx.replyWithHTML(
            `üëå –î–æ–±—Ä–µ, –∑–∞–ø—É—â–µ–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–ª—ñ–∫—É —Ç–æ–≤–∞—Ä—ñ–≤ –∑ ${label}! –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –¥–µ—è–∫–∏–π —á–∞—Å!`
          );
          break;
        case 'update:market:silpo':
          this.scrapersService.handleSilpoMarketScrape();
          await ctx.replyWithHTML(
            `üëå –î–æ–±—Ä–µ, –∑–∞–ø—É—â–µ–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–ª—ñ–∫—É —Ç–æ–≤–∞—Ä—ñ–≤ –∑ ${label}! –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –¥–µ—è–∫–∏–π —á–∞—Å!`
          );
          break;
        case 'update:market:novus':
          this.scrapersService.handleNovusMarketScrape();
          await ctx.replyWithHTML(
            `üëå –î–æ–±—Ä–µ, –∑–∞–ø—É—â–µ–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–ª—ñ–∫—É —Ç–æ–≤–∞—Ä—ñ–≤ –∑ ${label}! –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –¥–µ—è–∫–∏–π —á–∞—Å!`
          );
          break;
        default:
          await ctx.replyWithHTML('üí¢ <b>–£–ø—Å!</b> –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫!', {});
      }

      ctx.scene.leave();
    });

    this.telegramService.registerBotScene(scene);
  }

  private async handlerWebAppData(ctx: any) {
    const webAppData = ctx.message.web_app_data.data;

    const { order, price, comment } = JSON.parse(webAppData);

    const message = [];

    if (!order.length) {
      message.push('üó£ <b>–í–∞—à –ø–µ—Ä–µ–ª—ñ–∫ —Ç–æ–≤–∞—Ä—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π!</b>');

      return await ctx.replyWithHTML(message.join(''), {
        link_preview_options: { is_disabled: true }
      });
    }

    const products = await this.productModel
      .find({ _id: { $in: order.map(({ id }) => id) } })
      .select({
        _id: 1,
        title: 1,
        pricePer: 1,
        priceTitle: 1,
        market: 1,
        categoryName: 1
      })
      .lean()
      .exec();

    if (!products.length) {
      message.push('üó£ <b>–í–∞—à –ø–µ—Ä–µ–ª—ñ–∫ —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!</b>');

      return await ctx.replyWithHTML(message.join(''), {
        link_preview_options: { is_disabled: true }
      });
    }

    const productsCount = products.map((product: Record<string, any>) => {
      return {
        title: product.title,
        pricePer: product.pricePer,
        priceTitle: product.priceTitle,
        market: product.market,
        categoryName: product.categoryName,
        count: order.find(({ id }) => id == product._id)?.count || 0
      };
    });

    const groupProducts = this.groupByMarketAndCategory(productsCount);

    message.push('üîñ <b>–í–∞—à —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤:</b>\n');

    groupProducts.forEach((markets: Record<string, any>) => {
      message.push(`\nüè∑ <b>–ú–ê–†–ö–ï–¢: ${markets.market.toUpperCase()}</b>\n`);
      markets.categories.forEach((category: Record<string, any>) => {
        message.push(`\n<b>${category.categoryName}</b>\n`);
        category.products.forEach((product: Record<string, any>, index: number) => {
          message.push(
            `   <b>${index + 1}</b>. ${product.title} (<b>${
              product.count
            }x</b>) - <i>${product.pricePer} ${product.priceTitle}</i>\n`
          );
        });
      });
    });

    price ? message.push(`\n<b>–í–°–¨–û–ì–û:</b> ‚Ç¥${price}`) : message.push('');
    comment ? message.push(`\n\n<b>–í–∞—à –∫–æ–º–µ–Ω—Ç–∞—Ä:</b> <i>${comment}</i>`) : message.push('');

    await ctx.replyWithHTML(message.join(''), {
      link_preview_options: { is_disabled: true }
    });
  }

  private async handlerCommandStart(ctx: TContext) {
    const message = [
      `üëãüëãüëã <b><i>${ctx.userInfo.firstName}</i>, –º–æ—ó –≤—ñ—Ç–∞–Ω–Ω—è</b>!`,
      '\n\n',
      '‚òùÔ∏è –î–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—é—Ç—å, —â–æ –ø–æ–∫—É–ø—Ü—ñ –∑—ñ —Å–ø–∏—Å–∫–æ–º –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ —Ç–∞ –ø–æ–∫—É–ø–æ–∫ –≤–∏—Ç—Ä–∞—á–∞—é—Ç—å –Ω–∞ 15-30% –º–µ–Ω—à–µ –≥—Ä–æ—à–µ–π —É –º–∞–≥–∞–∑–∏–Ω–∞—Ö! ',
      '–ì—Ä–∞–º–æ—Ç–Ω–æ —Å–ø–ª–∞–Ω–æ–≤–∞–Ω–∏–π –ø–æ—Ö—ñ–¥ –¥–æ –º–∞–≥–∞–∑–∏–Ω—É –∑–±–µ—Ä–µ–∂–µ –≤–∞—à —á–∞—Å —ñ –ø–æ–∑–±–∞–≤–∏—Ç—å –≤—ñ–¥ –ø—Ä–∏–¥–±–∞–Ω–Ω—è –Ω–µ–ø–æ—Ç—Ä—ñ–±–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤.',
      '\n\n',
      '<i>üí™ –Ø –¥–æ–ø–æ–º–æ–∂—É –∑—Ä–æ–±–∏—Ç–∏ –ø—Ä–æ—Ü–µ—Å –ø–æ—Ö–æ–¥—É –¥–æ –º–∞–≥–∞–∑–∏–Ω—É –ø—Ä–æ—Å—Ç—ñ—à–µ, —à–≤–∏–¥—à–µ —Ç–∞ –Ω–∞–π–≥–æ–ª–æ–≤–Ω—ñ—à–µ, –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—à–µ.</i>',
      '\n\n',
      'üëâ –ù–∞–¥—ñ—à–ª—ñ—Ç—å <b>/help</b> –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥'
    ];

    await ctx.replyWithHTML(message.join(''), {
      link_preview_options: { is_disabled: true },
      reply_markup: {
        resize_keyboard: true,
        keyboard: [
          [
            {
              text: '–í—ñ–¥–∫—Ä–∏—Ç–∏ —Ö–æ–ª–æ–¥–æ—Å',
              web_app: { url: this.configService.get<string>('WEB_APP') }
            }
          ],
          [{ text: '‚ùì Help' }, { text: 'üí∏ Donate' }]
        ]
      }
    });

    const { userID } = ctx.userInfo;

    const user = await this.userModel.findOne({ userID });

    if (user) {
      return await this.userModel.findByIdAndUpdate(user.id, { ...ctx.userInfo });
    } else {
      return await this.userModel.create({ ...ctx.userInfo });
    }
  }

  private async handlerCommandHelp(ctx: TContext) {
    const message = [
      `üëãüëãüëã <b><i>${ctx.userInfo.firstName}</i>, –º–æ—ó –≤—ñ—Ç–∞–Ω–Ω—è</b>!`,
      '\n\n',
      '‚òùÔ∏è –Ø –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏ –í–∞–º —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–∞ –∫–µ—Ä—É–≤–∞—Ç–∏ —Å–ø–∏—Å–∫–æ–º —Ç–æ–≤–∞—Ä—ñ–≤. –í–∏ –º–æ–∂–µ—Ç–µ –∫–µ—Ä—É–≤–∞—Ç–∏ –º–Ω–æ—é, –Ω–∞–¥—ñ—Å–ª–∞–≤—à–∏ –Ω–∞—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:',
      '\n\n',
      `${MAIN_COMMANDS.commands.map(item => `/${item.command} - ${item.description}`).join('\n')}\n\n`,
      `<b><i>${OPERATION_COMMANDS.description}</i></b>\n`,
      `${OPERATION_COMMANDS.commands.map(item => `/${item.command} - ${item.description}`).join('\n')}\n\n`,
      `<b><i>${SYSTEM_COMMANDS.description}</i></b>\n`,
      `${SYSTEM_COMMANDS.commands.map(item => `/${item.command} - ${item.description}`).join('\n')}`,
      '\n\n\n',
      'üöß <b>–í—ñ–¥–∫—Ä–∏–π —Ö–æ–ª–æ–¥–æ—Å, –¥–ª—è –ø–æ—á–∞—Ç–∫—É</b> üëá'
    ];

    await ctx.replyWithHTML(message.join(''), {
      link_preview_options: { is_disabled: true },
      reply_markup: {
        resize_keyboard: true,
        keyboard: [
          [
            {
              text: '–í—ñ–¥–∫—Ä–∏—Ç–∏ —Ö–æ–ª–æ–¥–æ—Å',
              web_app: { url: this.configService.get<string>('WEB_APP') }
            }
          ],
          [{ text: '‚ùì Help' }, { text: 'üí∏ Donate' }]
        ]
      }
    });
  }

  private async handlerCommandAbout(ctx: TContext) {
    const message = [
      `üëãüëãüëã <b><i>${ctx.userInfo.firstName}</i>, –º–æ—ó –≤—ñ—Ç–∞–Ω–Ω—è</b>!`,
      '\n\n',
      '‚òùÔ∏è <b><i>–•–æ–ª–æ–¥–æ—Å</i></b> - —Ü–µ –±–æ—Ç, —â–æ —Ä–æ–±–∏—Ç—å –ø—Ä–æ—Ü–µ—Å –ø–æ—Ö–æ–¥—É –¥–æ –º–∞–≥–∞–∑–∏–Ω—É –ø—Ä–æ—Å—Ç—ñ—à–µ, —à–≤–∏–¥—à–µ, —ñ –Ω–∞–π–≥–æ–ª–æ–≤–Ω—ñ—à–µ, –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—à–µ. –ó–∞–≤–¥—è–∫–∏ –±–æ—Ç—É –í–∏ –∑–º–æ–∂–µ—Ç–µ:',
      '\n\n',
      'üî∏ <i>—à–≤–∏–¥–∫–æ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ —Ç–∞ –∫–µ—Ä—É–≤–∞—Ç–∏ —Å–ø–∏—Å–∫–∞–º–∏ –ø–æ–∫—É–ø–æ–∫, —Ä–æ–±–∏—Ç–∏ —ó—Ö –¥–æ—Å—Ç—É–ø–Ω–∏–º–∏ –±–ª–∏–∑—å–∫–∏–º —Ç–∞ –∑–Ω–∞–π–æ–º–∏–º;</i>',
      '\n',
      'üî∏ <i>–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Å–ø–∏—Å–∫–∏ —Ç–æ–≤–∞—Ä—ñ–≤ —Ç–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ñ —Ü—ñ–Ω–∏ –Ω–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à–∏—Ö –º–µ—Ä–µ–∂ —Å—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç—ñ–≤;</i>',
      '\n',
      'üî∏ <i>–∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –≤ —á–∞—Ç—ñ —Å—Ñ–æ—Ä–º–æ–≤–∞–Ω—ñ —Å–ø–∏—Å–∫–∏, —ñ —É –í–∞—Å —É –±—É–¥—å-—è–∫–∏–π —á–∞—Å —î –¥–æ –Ω–∏—Ö –¥–æ—Å—Ç—É–ø —è–∫ —ñ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω—É, —ñ–∑ –¥–æ–¥–∞—Ç–∫—É, —Ç–∞–∫ —ñ —á–µ—Ä–µ–∑ –≤–µ–±-—Å–∞–π—Ç;</i>',
      '\n\n\n',
      'üëâ –ù–∞–¥—ñ—à–ª—ñ—Ç—å <b>/help</b> –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥',
      '\n\n\n',
      `‚úåÔ∏è Created by <a href=\"${'https://t.me/baklai'}\">Dmitrii Baklai</a> ¬© ${new Date().getFullYear()}.`
    ];

    await ctx.replyWithHTML(message.join(''), {
      link_preview_options: { is_disabled: true },
      reply_markup: {
        resize_keyboard: true,
        keyboard: [
          [
            {
              text: '–í—ñ–¥–∫—Ä–∏—Ç–∏ —Ö–æ–ª–æ–¥–æ—Å',
              web_app: { url: this.configService.get<string>('WEB_APP') }
            }
          ],
          [{ text: '‚ùì Help' }, { text: 'üí∏ Donate' }]
        ]
      }
    });
  }

  private async handlerCommandNotice(ctx: any) {
    return ctx.scene.enter('notice');
  }

  private async handlerCommandAdmin(ctx: any) {
    return ctx.scene.enter('admin');
  }

  private async handlerCommandUpdate(ctx: any) {
    return ctx.scene.enter('update');
  }

  private async handlerCommandQuit(ctx: TContext) {
    const message = [`üëãüëãüëã <b><i>${ctx.userInfo.firstName}</i>, –º–æ—ó –≤—ñ—Ç–∞–Ω–Ω—è</b>!\n\n`];

    const user = await this.userModel.findOne({
      userID: ctx.userInfo.userID
    });

    if (!user) {
      message.push('‚ÄºÔ∏è –í–∏ –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ –º–µ–Ω–µ!\n\n');
      message.push('‚ÅâÔ∏è –Ø–∫—â–æ —Ö–æ—á–µ—Ç–µ –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ /start!\n');
      return await ctx.replyWithHTML(message.join(''), {});
    }

    message.push('üëåü´£ –î–æ–±—Ä–µ, –¥–∞–≤–∞–π—Ç–µ –≤—ñ–¥–ø–∏—à—É –í–∞—Å.\n\n');
    message.push('<i>‚ÅâÔ∏è –í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ —â–æ —Ö–æ—á–µ—Ç–µ –≤—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –≤—ñ–¥ –º–µ–Ω–µ?</i>\n\n');
    message.push('üëá –ë—É–¥—å –ª–∞—Å–∫–∞, –ø—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å —Å–≤–æ—î –Ω–∞–º—ñ—Ä—è–Ω–Ω—è');

    await ctx.replyWithHTML(message.join(''), {
      link_preview_options: {
        is_disabled: true
      },
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: '–¢–∞–∫ üíØ –≤—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è!',
              callback_data: 'quit:confirm:yes'
            },
            {
              text: '–ù—ñ, –Ω–µ –≤—ñ–¥–ø–∏—Å—É–≤–∞—Ç–∏—Å—è!',
              callback_data: 'quit:confirm:cancel'
            }
          ]
        ]
      }
    });
  }

  private async handlerQuitConfirm(ctx: any) {
    const callbackData = ctx.callbackQuery.data;

    const message = [`üëãüëãüëã <b><i>${ctx.userInfo.firstName}</i>, –º–æ—ó –≤—ñ—Ç–∞–Ω–Ω—è</b>!\n\n`];

    if (callbackData === 'quit:confirm:yes') {
      const user = await this.userModel.deleteOne({
        userID: ctx.userInfo.userID
      });

      if (!user) {
        message.push('‚ÄºÔ∏è –í–∏ –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ –º–µ–Ω–µ!\n\n');
        message.push('‚ÅâÔ∏è –í—ñ–¥–ø—Ä–∞–≤—Ç–µ –∫–æ–º–∞–Ω–¥—É /start —â–æ–± –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è!\n');
        return await ctx.replyWithHTML(message.join(''), {});
      }

      message.push('üëå –î–æ–±—Ä–µ, –≤–∏ –≤—ñ–¥–ø–∏—Å–∞–Ω—ñ –≤—ñ–¥ –±–æ—Ç—É!');

      return await ctx.replyWithHTML(message.join(''), {});
    } else {
      message.push(
        'üëå –î–æ–±—Ä–µ, –∫–æ–º–∞–Ω–¥–∞ –±—É–ª–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–∞.\n\n',
        '<i>‚ÅâÔ∏è –©–æ —è —â–µ –º–æ–∂—É –∑—Ä–æ–±–∏—Ç–∏ –¥–ª—è –≤–∞—Å?</i>'
      );
      return await ctx.replyWithHTML(message.join(''), {});
    }
  }

  private async handlerCommandDonate(ctx: TContext) {
    const message = [
      `üëãüëãüëã <b><i>${ctx.userInfo.firstName}</i>, –º–æ—ó –≤—ñ—Ç–∞–Ω–Ω—è</b>!`,
      '\n\n',
      'üëå –î–æ–±—Ä–µ, —è–∫—â–æ –≤–∏ –≤–∏—Ä—ñ—à–∏–ª–∏ –ø—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ —Ä–æ–∑–≤–∏—Ç–æ–∫ –±–æ—Ç—É —Ç–æ –Ω–µ –∑—É–ø–∏–Ω—è–π—Ç–µ—Å—å!',
      '\n\n',
      '<i>üëâ –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É —É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—ñ üëá</i>',
      '\n\n',
      'üëâ –ù–∞–¥—ñ—à–ª—ñ—Ç—å <b>/help</b> –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥',
      '\n\n',
      `‚úåÔ∏è Created by <a href=\"${'https://t.me/baklai'}\">Dmitrii Baklai</a> ¬© ${new Date().getFullYear()}.`
    ];

    await ctx.replyWithHTML(message.join(''), {
      link_preview_options: { is_disabled: true },
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: 'üí∏ DONATE FOR BOT',
              url: this.configService.get<string>('DONATE')
            }
          ]
        ]
      }
    });
  }

  private async handlerCommandStatistic(ctx: TContext) {
    const usersCount = await this.userModel.countDocuments();
    const marketsCount = await this.productModel.aggregate([
      {
        $group: {
          _id: '$market',
          count: { $sum: 1 }
        }
      },
      {
        $project: {
          _id: 0,
          market: '$_id',
          count: 1
        }
      }
    ]);

    const message = [
      `üëãüëãüëã <b><i>${ctx.userInfo.firstName}</i>, –º–æ—ó –≤—ñ—Ç–∞–Ω–Ω—è</b>!`,
      '\n\n',
      'üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–¥–∞—Ç–∫—É:</b>\n',
      '\n',
      `<i> üòÄ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: ${usersCount}</i>`,
      '\n\n',
      `üè™ <b>–¢–æ–≤–∞—Ä–∏ –ø–æ –º–∞—Ä–∫–µ—Ç–∞–º:</b>\n`,
      '\n',
      ...marketsCount.map(
        (item: any) =>
          `<i> üè∑ ${MARKETS.find(({ key }) => item.market === key).label}: ${item.count}</i>\n`
      ),

      '\n\n',
      'üëâ –ù–∞–¥—ñ—à–ª—ñ—Ç—å <b>/help</b> –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥'
    ];

    await ctx.replyWithHTML(message.join(''), {
      link_preview_options: { is_disabled: true },
      reply_markup: {
        resize_keyboard: true,
        keyboard: [
          [
            {
              text: '–í—ñ–¥–∫—Ä–∏—Ç–∏ —Ö–æ–ª–æ–¥–æ—Å',
              web_app: { url: this.configService.get<string>('WEB_APP') }
            }
          ],
          [{ text: '‚ùì Help' }, { text: 'üí∏ Donate' }]
        ]
      }
    });
  }
}
