const axios = require('axios');
// const sharp = require('sharp');

const User = require('../services/user.service');
const Category = require('../services/category.service');
const Product = require('../services/product.service');

const { TOKEN } = process.env;

class Action {
  constructor(bot) {
    this.bot = bot;
    this.actions = [];
  }
  getAction(id) {
    return this.actions.find((item) => item.id === id);
  }
  setAction(id, type) {
    if (this.getAction(id)) this.delAction(id);
    this.actions.push({ id, type, obj: {} });
  }
  setActionType(id, type) {
    const action = this.getAction(id);
    if (action) {
      action.type = type;
    }
  }
  delAction(id) {
    const index = this.actions.findIndex((item) => {
      return item.id === id;
    });
    if (index >= 0) this.actions.splice(index, 1);
    return true;
  }
}

class API extends Action {
  constructor(bot) {
    super(bot);
  }

  isBot(msg) {
    return msg.entities
      ? msg.entities.find((item) => item.type === 'bot_command')
      : undefined;
  }

  cancelAction(msg) {
    const { id } = msg.chat;
    const action = this.getAction(id);
    let message = 'üí¢ <b>–£–ø—Å!</b> –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫!';
    if (action) {
      this.delAction(id);
      message = `üëå –î–æ–±—Ä–µ, –∫–æ–º–∞–Ω–¥–∞ –±—É–ª–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–∞.\n\n‚ÅâÔ∏è <i>–©–æ —è —â–µ –º–æ–∂—É –∑—Ä–æ–±–∏—Ç–∏ –¥–ª—è –≤–∞—Å?</i>\n\n–ù–∞–¥—ñ—à–ª—ñ—Ç—å /help –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥.`;
    } else {
      message =
        'ü§î ü•± –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è. –Ø –≤—Å–µ –æ–¥–Ω–æ –Ω—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–∏–≤...';
    }
    this.bot.sendMessage(id, message, { parse_mode: 'HTML' });
  }

  async getCategory(msg) {
    const { id } = msg.chat;
    let message = `üí¢ <b>–£–ø—Å!</b> –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π —Ç–æ–≤–∞—Ä—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π!`;
    try {
      const category = await Category.findAll();
      if (category.length) {
        message = `üëå –î–æ–±—Ä–µ, –¥–∞–≤–∞–π—Ç–µ –ø–æ–¥–∏–≤–∏–º–æ—Å—è —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π —Ç–æ–≤–∞—Ä—ñ–≤:\n\n`;
        category.forEach((item, index) => {
          message += `<b>${index + 1}.</b> <i>${item.title}</i>\n`;
        });
        message += `\n<i>–í–∏ –º–æ–∂–µ—Ç–µ –∫–µ—Ä—É–≤–∞—Ç–∏ –±–æ—Ç–æ–º, –≤—ñ–¥–ø—Ä–∞–≤–∏–≤—à–∏ –∫–æ–º–∞–Ω–¥–∏ –∑—ñ —Å–ø–∏—Å–∫—É /help</i>`;
      }
    } catch (err) {
      message = `üí¢ <b>–£–ø—Å!</b> –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫!. –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: <i>${err.message}</i>`;
    } finally {
      this.delAction(id);
      this.bot.sendMessage(id, message, { parse_mode: 'HTML' });
    }
  }

  newCategory(msg) {
    const { id } = msg.chat;
    let message = `üëå –î–æ–±—Ä–µ, –¥–∞–≤–∞–π—Ç–µ –¥–æ–¥–∞–º–æ <b><i>–Ω–æ–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–æ–≤–∞—Ä—ñ–≤</i></b>.\n\n<i>‚ÅâÔ∏è–Ø–∫ –º–∏ –∑–±–∏—Ä–∞—î–º–æ—Å—å –Ω–∞–∑–≤–∞—Ç–∏ —ó—ó?</i>\n\nüëâ –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É <b><i>–Ω–æ–≤–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç–æ–≤–∞—Ä—ñ–≤</i></b> –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /cancel, —â–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –æ–ø–µ—Ä–∞—Ü—ñ—é:`;
    this.setAction(id, 'input-category-title');
    const action = this.getAction(id);
    action.obj.title = msg.text;
    this.bot.sendMessage(id, message, { parse_mode: 'HTML' });
  }

  async ['input-category-title'](msg) {
    const { id } = msg.chat;
    let message = 'üí¢ <b>–£–ø—Å!</b> –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫!';
    try {
      const action = this.getAction(id);
      action.obj.title = msg.text;
      message = `üëå –ù–æ–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è —Ç–æ–≤–∞—Ä—ñ–≤ "<b>${msg.text}</b>" —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–∞.`;
      await Category.createOne({ ...action.obj });
    } catch (err) {
      message = `üí¢ <b>–£–ø—Å!</b> –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫!. –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: <i>${err.message}</i>`;
    } finally {
      this.delAction(id);
      this.bot.sendMessage(id, message, { parse_mode: 'HTML' });
    }
  }

  async editCategory(msg) {
    const { id } = msg.chat;
    let message = 'üí¢ <b>–£–ø—Å!</b> –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫!';
    let reply_markup = null;
    try {
      const category = await Category.findAll();
      if (category.length) {
        this.setAction(id, 'select-edit-category');
        message = `üëå –î–æ–±—Ä–µ, –¥–∞–≤–∞–π—Ç–µ –∑–º—ñ–Ω–∏–º–æ <b><i>–∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–æ–≤–∞—Ä—ñ–≤</i></b>.\n\n<i>‚ÅâÔ∏è –Ø–∫—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–æ–≤–∞—Ä—ñ–≤ —Ö–æ—á–µ–º–æ –∑–º—ñ–Ω–∏—Ç–∏?</i>\n\nüëâ –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –∑—ñ —Å–ø–∏—Å–∫—É <b><i>–∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–æ–≤–∞—Ä—ñ–≤</i></b> –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /cancel, —â–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –æ–ø–µ—Ä–∞—Ü—ñ—é:`;
        reply_markup = {
          inline_keyboard: category.map((item) => [
            { text: item.title, callback_data: item.id }
          ])
        };
      } else {
        message = `üí¢ <b>–£–ø—Å!</b> –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π —Ç–æ–≤–∞—Ä—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π!`;
      }
    } catch (err) {
      this.delAction(id);
      message = `üí¢ <b>–£–ø—Å!</b> –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫!. –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: <i>${err.message}</i>`;
    } finally {
      this.bot.sendMessage(id, message, { parse_mode: 'HTML', reply_markup });
    }
  }

  async ['select-edit-category'](query) {
    const { message_id } = query.message || {};
    const { id } = query.message?.chat || {};
    const action = this.getAction(id);
    let message = 'üí¢ <b>–£–ø—Å!</b> –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫!';
    try {
      const category = await Category.findOne(query.data);
      action.obj.id = category.id;
      action.obj.title = category.title;
      message = `üëå –î–æ–±—Ä–µ, –≤–∏–±—Ä–∞–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–æ–≤–∞—Ä—ñ–≤ "<b><i>${category.title}</i></b>".\n\n‚ÅâÔ∏è –Ø–∫—É –Ω–æ–≤—É –Ω–∞–∑–≤—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç–æ–≤–∞—Ä—ñ–≤ –º–∏ —Ö–æ—á–µ–º–æ –ø–æ—Å—Ç–∞–≤–∏—Ç–∏?\n\n–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –Ω–∞–∑–≤—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç–æ–≤–∞—Ä—ñ–≤ "<b><i>${category.title}</i></b>" –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /cancel, —â–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –æ–ø–µ—Ä–∞—Ü—ñ—é:`;
      this.setActionType(id, 'input-edit-category-title');
    } catch (err) {
      this.delAction(id);
      message = `üí¢ <b>–£–ø—Å!</b> –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫!. –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: <i>${err.message}</i>`;
    } finally {
      this.bot.editMessageText(message, {
        chat_id: id,
        message_id: message_id,
        parse_mode: 'HTML'
      });
    }
  }

  async ['input-edit-category-title'](msg) {
    const { id } = msg.chat;
    let message = 'üí¢ <b>–£–ø—Å!</b> –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫!';
    try {
      const action = this.getAction(id);
      message = `üëå –î–æ–±—Ä–µ, –∫–∞—Ç–µ–≥–æ—Ä—ñ—è —Ç–æ–≤–∞—Ä—ñ–≤ "<i>${action.obj.title}</i>" —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ "<b>${msg.text}</b>".`;
      action.obj.title = msg.text;
      await Category.updateOne(action.obj.id, {
        ...action.obj
      });
    } catch (err) {
      message = `üí¢ <b>–£–ø—Å!</b> –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫!. –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: <i>${err.message}</i>`;
    } finally {
      this.delAction(id);
      this.bot.sendMessage(id, message, { parse_mode: 'HTML' });
    }
  }

  async deleteCategory(msg) {
    const { id } = msg.chat;
    let message = 'üí¢ <b>–£–ø—Å!</b> –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫!';
    let reply_markup = null;
    try {
      const category = await Category.findAll();
      if (category.length) {
        this.setAction(id, 'select-delete-category');
        message = `üëå –î–æ–±—Ä–µ, –¥–∞–≤–∞–π—Ç–µ –≤–∏–¥–∞–ª–∏–º–æ <b><i>–∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–æ–≤–∞—Ä—ñ–≤</i></b>.\n\n<i>‚ÅâÔ∏è –Ø–∫—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–æ–≤–∞—Ä—ñ–≤ —Ö–æ—á–µ–º–æ –≤–∏–¥–∞–ª–∏—Ç–∏?</i>\n\nüëâ –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –∑—ñ —Å–ø–∏—Å–∫—É <b><i>–∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–æ–≤–∞—Ä—ñ–≤</i></b> –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /cancel, —â–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –æ–ø–µ—Ä–∞—Ü—ñ—é:`;
        reply_markup = {
          inline_keyboard: category.map((item) => [
            { text: item.title, callback_data: item.id }
          ])
        };
      } else {
        message = `üí¢ <b>–£–ø—Å!</b> –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π —Ç–æ–≤–∞—Ä—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π!`;
      }
    } catch (err) {
      message = `üí¢ <b>–£–ø—Å!</b> –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫!. –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: <i>${err.message}</i>`;
    } finally {
      this.bot.sendMessage(id, message, { parse_mode: 'HTML', reply_markup });
    }
  }

  async ['select-delete-category'](query) {
    const { message_id } = query.message || {};
    const { id } = query.message?.chat || {};
    const action = this.getAction(id);
    let message = 'üí¢ <b>–£–ø—Å!</b> –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫!';
    let reply_markup = null;
    try {
      const category = await Category.findOne(query.data);
      message = `üëå –î–æ–±—Ä–µ, –≤–∏–±—Ä–∞–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–æ–≤–∞—Ä—ñ–≤ "<b><i>${category.title}</i></b>".\n\n<i>–í–∏ –¥—ñ–π—Å–Ω–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —ó—ó?</i>\n\n‚ÄºÔ∏è –ó–≤–µ—Ä–Ω—ñ—Ç—å —É–≤–∞–≥—É, —â–æ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç–æ–≤–∞—Ä—ñ–≤ –±—É–¥—É—Ç—å –≤–∏–¥–∞–ª–µ–Ω—ñ –≤—Å—ñ —Ç–æ–≤–∞—Ä–∏ —Ü—ñ—î—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó!`;
      action.obj.id = category.id;
      action.obj.title = category.title;
      this.setActionType(id, 'query-delete-category');
      reply_markup = {
        inline_keyboard: [
          [
            { text: '–¢–∞–∫ üíØ –≤–∏–¥–∞–ª–∏—Ç–∏!', callback_data: 'delete' },
            { text: '–ù—ñ, –Ω–µ –≤–∏–¥–∞–ª—è—Ç–∏!', callback_data: 'cancel' }
          ]
        ]
      };
    } catch (err) {
      this.delAction(id);
      message = `üí¢ <b>–£–ø—Å!</b> –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫!. –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: <i>${err.message}</i>`;
    } finally {
      this.bot.editMessageText(message, {
        chat_id: id,
        message_id: message_id,
        parse_mode: 'HTML',
        reply_markup
      });
    }
  }

  async ['query-delete-category'](query) {
    const { message_id } = query.message || {};
    const { id } = query.message?.chat || {};
    const action = this.getAction(id);
    let message = 'üí¢ <b>–£–ø—Å!</b> –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫!';
    try {
      if (query.data === 'delete') {
        await Category.removeOne(action.obj.id);
        message = `üëå –î–æ–±—Ä–µ, –∫–∞—Ç–µ–≥–æ—Ä—ñ—è —Ç–æ–≤–∞—Ä—ñ–≤ "<i>${action.obj.title}</i>" –±—É–ª–∞ —É—Å–ø—ñ—à–Ω–æ <b>–≤–∏–¥–∞–ª–µ–Ω–∞</b>.`;
      } else if (query.data === 'cancel') {
        message = `üëå –î–æ–±—Ä–µ, –∫–æ–º–∞–Ω–¥–∞ –±—É–ª–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–∞.\n\n<i>–©–æ —è —â–µ –º–æ–∂—É –∑—Ä–æ–±–∏—Ç–∏ –¥–ª—è –≤–∞—Å? –ù–∞–¥—ñ—à–ª—ñ—Ç—å /help –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥.</i>`;
      }
    } catch (err) {
      message = `üí¢ <b>–£–ø—Å!</b> –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫!. –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: <i>${err.message}</i>`;
    } finally {
      this.delAction(id);
      this.bot.editMessageText(message, {
        chat_id: id,
        message_id: message_id,
        parse_mode: 'HTML'
      });
    }
  }

  // –û–°–¢–ê–ù–û–í–ò–õ–°–Ø –¢–£–¢

  async getProducts(msg) {
    const { id } = msg.chat;
    let message = 'üí¢ <b>–£–ø—Å!</b> –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫!';
    let reply_markup = null;
    try {
      const category = await Category.findAll();
      if (category.length) {
        this.setAction(id, 'products-in-category');
        message = `üëå –î–æ–±—Ä–µ, –¥–∞–≤–∞–π—Ç–µ –ø–æ–¥–∏–≤–∏–º–æ—Å—è <b><i>—Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤</i></b>.\n\n<i>‚ÅâÔ∏è –ó —è–∫–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç–æ–≤–∞—Ä—ñ–≤ –º–∏ —Ö–æ—á–µ–º–æ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤?</i>\n\nüëâ –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –∑—ñ —Å–ø–∏—Å–∫—É <b><i>–∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–æ–≤–∞—Ä—ñ–≤</i></b> –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /cancel, —â–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –æ–ø–µ—Ä–∞—Ü—ñ—é:`;
        reply_markup = {
          inline_keyboard: category.map((item) => [
            { text: item.title, callback_data: item.id }
          ])
        };
      } else {
        message = `üí¢ <b>–£–ø—Å!</b> –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π —Ç–æ–≤–∞—Ä—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π!`;
      }
    } catch (err) {
      message = `üí¢ <b>–£–ø—Å!</b> –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫!. –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: <i>${err.message}</i>`;
    } finally {
      this.bot.sendMessage(id, message, { parse_mode: 'HTML', reply_markup });
    }
  }

  // –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫–∞–∫ –ø–æ—è–≤—è—Ç—Å—è —Ç–æ–≤–∞—Ä—ã
  async ['products-in-category'](query) {
    const { message_id } = query.message || {};
    const { id } = query.message?.chat || {};
    let message = `üí¢ <b>–£–ø—Å!</b> –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π —Ç–æ–≤–∞—Ä—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π!`;
    try {
      const category = await Category.findOne(query.data);
      const products = await Product.findAll(query.data);
      if (products.length) {
        message = `üëå –î–æ–±—Ä–µ, –≤–∏–±—Ä–∞–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–æ–≤–∞—Ä—ñ–≤ "<b><i>${category.title}</i></b>". –î–∞–≤–∞–π—Ç–µ –ø–æ–¥–∏–≤–∏–º–æ—Å—è —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤ —É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó "<b><i>${category.title}</i></b>":\n\n`;
        products.forEach((item, index) => {
          message += `<b>${index + 1}.</b> <i>${item.title}</i>\n`;
        });
        message += `\n<i>–í–∏ –º–æ–∂–µ—Ç–µ –∫–µ—Ä—É–≤–∞—Ç–∏ –±–æ—Ç–æ–º, –≤—ñ–¥–ø—Ä–∞–≤–∏–≤—à–∏ –∫–æ–º–∞–Ω–¥–∏ –∑—ñ —Å–ø–∏—Å–∫—É /help</i>`;
      } else {
        message = `üí¢ <b>–£–ø—Å!</b> –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π!`;
      }
    } catch (err) {
      message = `üí¢ <b>–£–ø—Å!</b> –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫!. –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: <i>${err.message}</i>`;
    } finally {
      this.delAction(id);
      this.bot.editMessageText(message, {
        chat_id: id,
        message_id: message_id,
        parse_mode: 'HTML'
      });
    }
  }

  async newProduct(msg) {
    const { id } = msg.chat;
    // let message = 'üí¢ <b>–£–ø—Å!</b> –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫!';
    // let reply_markup = null;
    // try {
    //   const category = await Category.findAll();
    //   if (category.length) {
    //     this.setAction(id, 'select-category-new-product');
    //     message = `üëå –î–æ–±—Ä–µ, –¥–∞–≤–∞–π—Ç–µ –¥–æ–¥–∞–º–æ <b><i>–Ω–æ–≤–∏–π —Ç–æ–≤–∞—Ä</i></b>.\n\n‚ÅâÔ∏è <i>–î–æ —è–∫–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç–æ–≤–∞—Ä—ñ–≤ –º–∏ —Ö–æ—á–µ–º–æ –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π —Ç–æ–≤–∞—Ä?</i>\n\nüëâ –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –∑—ñ —Å–ø–∏—Å–∫—É <b>–∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–æ–≤–∞—Ä—ñ–≤</b> –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /cancel, —â–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –æ–ø–µ—Ä–∞—Ü—ñ—é:`;
    //     reply_markup = {
    //       inline_keyboard: category.map((item) => [
    //         { text: item.title, callback_data: item.id }
    //       ])
    //     };
    //   } else {
    //     message = `üí¢ <b>–£–ø—Å!</b> –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π —Ç–æ–≤–∞—Ä—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π!`;
    //   }
    // } catch (err) {
    //   message = `üí¢ <b>–£–ø—Å!</b> –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫!. –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: <i>${err.message}</i>`;
    // } finally {
    //   this.bot.sendMessage(id, message, { parse_mode: 'HTML', reply_markup });
    // }
  }

  // async ['select-category-new-product'](query) {
  //   const { message_id } = query.message || {};
  //   const { id } = query.message?.chat || {};
  //   const action = this.getAction(id);
  //   let message = 'üí¢ <b>–£–ø—Å!</b> –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫!';
  //   try {
  //     const category = await Category.findOne(query.data);
  //     action.obj.category = category.id;
  //     this.setActionType(id, 'input-new-product-title');
  //     message = `üëå –î–æ–±—Ä–µ, –≤–∏–±—Ä–∞–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–æ–≤–∞—Ä—ñ–≤ "<b><i>${category.title}</i></b>".\n\n‚ÅâÔ∏è –Ø–∫–∏–π –Ω–æ–≤–∏–π —Ç–æ–≤–∞—Ä —Ö–æ—á–µ–º–æ –¥–æ–¥–∞—Ç–∏?\n\n–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç–æ–≤–∞—Ä—ñ–≤ "<b><i>${category.title}</i></b>" –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /cancel, —â–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –æ–ø–µ—Ä–∞—Ü—ñ—é:`;
  //   } catch (err) {
  //     this.delAction(id);
  //     message = `üí¢ <b>–£–ø—Å!</b> –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫!. –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: <i>${err.message}</i>`;
  //   } finally {
  //     this.bot.editMessageText(message, {
  //       chat_id: id,
  //       message_id: message_id,
  //       parse_mode: 'HTML'
  //     });
  //   }
  // }

  // async ['input-new-product-title'](msg) {
  //   const { id } = msg.chat;
  //   let message = 'üí¢ <b>–£–ø—Å!</b> –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫!';
  //   let reply_markup = null;
  //   const action = this.getAction(id);
  //   try {
  //     action.obj.title = msg.text;
  //     message = `üëå –î–æ–±—Ä–µ, –Ω–∞–∑–≤–∞ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä—É "<b>${msg.text}</b>" —É—Å–ø—ñ—à–Ω–æ –ø—Ä–∏–π–Ω—è—Ç–∞.\n\n–í–∏–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–º—ñ—Ä–Ω—ñ—Å—Ç—å –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä—É –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /cancel, —â–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –æ–ø–µ—Ä–∞—Ü—ñ—é:`;
  //     reply_markup = {
  //       inline_keyboard: [
  //         [
  //           { text: '–≥—Ä–Ω/—à—Ç', callback_data: '–≥—Ä–Ω/—à—Ç' },
  //           { text: '–≥—Ä–Ω/–∫–≥', callback_data: '–≥—Ä–Ω/–∫–≥' },
  //           { text: '–≥—Ä–Ω/–ª—ñ—Ç—Ä', callback_data: '–≥—Ä–Ω/–ª—ñ—Ç—Ä' }
  //         ]
  //       ]
  //     };
  //     this.setActionType(id, 'input-new-product-price-title');
  //   } catch (err) {
  //     this.delAction(id);
  //     message = `üí¢ <b>–£–ø—Å!</b> –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫!. –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: <i>${err.message}</i>`;
  //   } finally {
  //     this.bot.sendMessage(id, message, { parse_mode: 'HTML', reply_markup });
  //   }
  // }

  // async ['input-new-product-price-title'](query) {
  //   const { message_id } = query.message || {};
  //   const { id } = query.message?.chat || {};
  //   const action = this.getAction(id);
  //   let message = 'üí¢ <b>–£–ø—Å!</b> –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫!';
  //   try {
  //     action.obj.priceTitle = query.data;
  //     message = `üëå –î–æ–±—Ä–µ, –≤–∏–±—Ä–∞–Ω–æ —Ä–æ–∑–º—ñ—Ä–Ω—ñ—Å—Ç—å –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä—É "<b><i>${action.obj.priceTitle}</i></b>".\n\n–í–≤–µ–¥—ñ—Ç—å –≤–∞—Ä—Ç—ñ—Å—Ç—å –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä—É "<b><i>${action.obj.title}</i></b>" –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /cancel, —â–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –æ–ø–µ—Ä–∞—Ü—ñ—é:`;
  //     this.setActionType(id, 'input-new-product-price');
  //   } catch (err) {
  //     this.delAction(id);
  //     message = `üí¢ <b>–£–ø—Å!</b> –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫!. –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: <i>${err.message}</i>`;
  //   } finally {
  //     this.bot.editMessageText(message, {
  //       chat_id: id,
  //       message_id: message_id,
  //       parse_mode: 'HTML'
  //     });
  //   }
  // }

  // async ['input-new-product-price'](msg) {
  //   const { id } = msg.chat;
  //   let message = 'üí¢ <b>–£–ø—Å!</b> –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫!';
  //   let reply_markup = null;
  //   const action = this.getAction(id);
  //   try {
  //     action.obj.pricePer = msg.text;
  //     message = `üëå –î–æ–±—Ä–µ, –≤–∞—Ä—Ç—ñ—Å—Ç—å –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä—É "<b>${msg.text}</b>" —É—Å–ø—ñ—à–Ω–æ –ø—Ä–∏–π–Ω—è—Ç–æ.\n\n<i>–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä—É –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /cancel, —â–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –æ–ø–µ—Ä–∞—Ü—ñ—é:</i>`;
  //     this.setActionType(id, 'input-new-product-img');
  //   } catch (err) {
  //     this.delAction(id);
  //     message = `üí¢ <b>–£–ø—Å!</b> –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫!. –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: <i>${err.message}</i>`;
  //   } finally {
  //     this.bot.sendMessage(id, message, { parse_mode: 'HTML', reply_markup });
  //   }
  // }

  // async ['input-new-product-img'](msg) {
  //   const { id } = msg.chat;
  //   let fileID = null;
  //   if (msg.photo) {
  //     fileID = msg.photo[msg.photo.length - 1].file_id;
  //   } else if (msg.document) {
  //     fileID = msg.document.file_id;
  //   }
  //   let message = 'üí¢ <b>–£–ø—Å!</b> –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫!';
  //   const action = this.getAction(id);
  //   try {
  //     let url = `https://api.telegram.org/bot${TOKEN}/getFile?file_id=${fileID}`;
  //     const { data } = await axios.get(url);
  //     url = `https://api.telegram.org/file/bot${TOKEN}/${data.result.file_path}`;
  //     message = `üëå –§–æ—Ç–æ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä—É —É—Å–ø—ñ—à–Ω–æ –ø—Ä–∏–π–Ω—è—Ç–æ.`;
  //     const img = await axios.get(url, {
  //       responseType: 'arraybuffer'
  //     });
  //     action.obj.img = await sharp(img.data).resize(256).webp().toBuffer();
  //     const product = await Product.createOne({ ...action.obj });
  //     const category = await Category.findOne(product.category);
  //     this.bot.sendPhoto(
  //       id,
  //       Buffer.from(product.img, 'base64'),
  //       {
  //         parse_mode: 'HTML',
  //         caption: `<b>–ö–∞—Ç–µ–≥–æ—Ä—ñ—è —Ç–æ–≤–∞—Ä—ñ–≤</b>: ${category.title}\n<b>–ù–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É</b>: ${product.title}\n<b>–¶—ñ–Ω–∞ —Ç–æ–≤–∞—Ä—É</b>: ${product.pricePer} ${product.priceTitle}`
  //       },
  //       {
  //         filename: undefined,
  //         contentType: undefined
  //       }
  //     );
  //   } catch (err) {
  //     message = `üí¢ <b>–£–ø—Å!</b> –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫!. –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: <i>${err.message}</i>`;
  //   } finally {
  //     this.delAction(id);
  //     this.bot.sendMessage(id, message, { parse_mode: 'HTML' });
  //   }
  // }
}

module.exports = API;
