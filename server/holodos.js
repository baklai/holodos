/*
 * Holodos Telegram Bot
 * Copyright(c) 2022 Dmitrii Baklai
 * MIT Licensed
 */
process.env.NTBA_FIX_319 = 1;
process.env.NTBA_FIX_350 = 1;

const TelegramBot = require('node-telegram-bot-api');

const { TOKEN, PROXY, WEB_APP } = process.env;

const ActionsBot = require('./lib/actions');
const User = require('./services/user.service');
const Stat = require('./services/statistic.service');

const bot = new TelegramBot(
  TOKEN,
  process.env.NODE_ENV === 'production'
    ? {}
    : {
        filepath: false,
        polling: {
          interval: 300,
          autoStart: true,
          params: { timeout: 10 }
        },
        request: {
          proxy: PROXY ? PROXY : null
        }
      }
);

const api = new ActionsBot(bot);

if (process.env.NODE_ENV === 'production') {
  bot.setWebHook(`${WEB_APP}/bot/v1/bot${TOKEN}`);
} else {
  bot.on('polling_error', (err) => {
    console.error(err);
    process.exit(1);
  });
}

const { commands, helper } = require('./lib/commands');

bot
  .setMyCommands(commands)
  .then((msg) => {
    console.info('Telegram Bot is running...');
  })
  .catch((err) => {
    console.error(err);
    process.exit(1);
  });

bot.onText(/\/start/, async (msg) => {
  const { id } = msg.chat;
  let message = `üëã <b>–í—ñ—Ç–∞–Ω–Ω—è <i>${msg.from.first_name}</i></b>!\n\nüí™ –Ø –¥–æ–ø–æ–º–æ–∂—É –∑—Ä–æ–±–∏—Ç–∏ –ø—Ä–æ—Ü–µ—Å –ø–æ—Ö–æ–¥—É –¥–æ –º–∞–≥–∞–∑–∏–Ω—É –ø—Ä–æ—Å—Ç—ñ—à–µ, —à–≤–∏–¥—à–µ —Ç–∞ –Ω–∞–π–≥–æ–ª–æ–≤–Ω—ñ—à–µ, –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—à–µ.\n\n<i>üëâ –í–∏ –º–æ–∂–µ—Ç–µ –∫–µ—Ä—É–≤–∞—Ç–∏ –±–æ—Ç–æ–º, –Ω–∞–¥—ñ—Å–ª–∞–≤—à–∏ –∫–æ–º–∞–Ω–¥–∏ –∑—ñ —Å–ø–∏—Å–∫—É /help</i>\n\n<i><b>–í—ñ–¥–∫—Ä–∏–π —Ö–æ–ª–æ–¥–æ—Å, —â–æ–± –ø–æ—á–∞—Ç–∏</b></i> üëá`;
  let reply_markup = {
    keyboard: [[{ text: '–í—ñ–¥–∫—Ä–∏—Ç–∏ —Ö–æ–ª–æ–¥–æ—Å', web_app: { url: WEB_APP } }]],
    resize_keyboard: true
  };
  bot.sendMessage(id, message, { parse_mode: 'HTML', reply_markup });
  await User.createOne(msg.chat);
});

bot.onText(/\/help/, async (msg) => {
  const { id } = msg.chat;
  let message = `üëã <b>–í—ñ—Ç–∞–Ω–Ω—è <i>${msg.from.first_name}</i></b>!\n\n–Ø –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏ –í–∞–º —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–∞ –∫–µ—Ä—É–≤–∞—Ç–∏ —Å–ø–∏—Å–∫–æ–º —Ç–æ–≤–∞—Ä—ñ–≤. –í–∏ –º–æ–∂–µ—Ç–µ –∫–µ—Ä—É–≤–∞—Ç–∏ –º–Ω–æ—é, –Ω–∞–¥—ñ—Å–ª–∞–≤—à–∏ –Ω–∞—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n${helper}`;
  let reply_markup = {
    keyboard: [[{ text: '–í—ñ–¥–∫—Ä–∏—Ç–∏ —Ö–æ–ª–æ–¥–æ—Å', web_app: { url: WEB_APP } }]],
    resize_keyboard: true
  };

  bot.sendMessage(id, message, { parse_mode: 'HTML', reply_markup });

  // –≤—Ä–µ–º–µ–Ω–Ω–æ
  await User.createOne(msg.chat);
});

bot.onText(/\/about/, (msg) => {
  const { id } = msg.chat;
  let message = `
  üëã <b>–í—ñ—Ç–∞–Ω–Ω—è <i>${msg.from.first_name}</i></b>!\n
  <b><i>–•–æ–ª–æ–¥–æ—Å</i></b>  üëâ  —Ü–µ –±–æ—Ç-–¥–æ–¥–∞—Ç–æ–∫, —â–æ —Ä–æ–±–∏—Ç—å –ø—Ä–æ—Ü–µ—Å –ø–æ—Ö–æ–¥—É –¥–æ –º–∞–≥–∞–∑–∏–Ω—É –ø—Ä–æ—Å—Ç—ñ—à–µ, —à–≤–∏–¥—à–µ, —ñ –Ω–∞–π–≥–æ–ª–æ–≤–Ω—ñ—à–µ, –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—à–µ.\n
  üî∏ <i>–ó–∞–≤–¥—è–∫–∏ –±–æ—Ç—É –í–∏ –∑–º–æ–∂–µ—Ç–µ —à–≤–∏–¥–∫–æ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ —Ç–∞ –∫–µ—Ä—É–≤–∞—Ç–∏ —Å–ø–∏—Å–∫–∞–º–∏ –ø–æ–∫—É–ø–æ–∫, —Ä–æ–±–∏—Ç–∏ —ó—Ö –¥–æ—Å—Ç—É–ø–Ω–∏–º–∏ –∑–Ω–∞–π–æ–º–∏–º.</i>
  üî∏ <i>–í—Å—ñ –∑–º—ñ–Ω–∏ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è –≤ —á–∞—Ç—ñ, —ñ —É –í–∞—Å —É –±—É–¥—å-—è–∫–∏–π —á–∞—Å —î –¥–æ –Ω–∏—Ö –¥–æ—Å—Ç—É–ø —è–∫ —ñ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω—É, —ñ–∑ –¥–æ–¥–∞—Ç–∫—É, —Ç–∞–∫ —ñ —á–µ—Ä–µ–∑ –≤–µ–±-—Å–∞–π—Ç.</i>\n
  ‚òùÔ∏è –í–∏ –º–æ–∂–µ—Ç–µ –∫–µ—Ä—É–≤–∞—Ç–∏ –±–æ—Ç–æ–º, –Ω–∞–¥—ñ—Å–ª–∞–≤—à–∏ –∫–æ–º–∞–Ω–¥–∏ –∑—ñ —Å–ø–∏—Å–∫—É /help


  Copyright ¬© 2022 <a href="https://t.me/baklai">Baklai</a>. Created by Dmitrii Baklai.`;
  bot.sendMessage(id, message, { parse_mode: 'HTML' });
});

bot.onText(/\/statistic/, async (msg) => {
  const { id } = msg.chat;
  const stat = await Stat.statAll();
  let message = `üëã <b>–í—ñ—Ç–∞–Ω–Ω—è <i>${msg.from.first_name}</i></b>!\n\nüìä <i>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–¥–∞—Ç–∫—É:\n\n üîπ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: ${stat.users}\n üîπ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ–π —Ç–æ–≤–∞—Ä—ñ–≤: ${stat.categories}\n üîπ –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤ —É –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö: ${stat.products}</i>\n\nüëâ –í–∏ –º–æ–∂–µ—Ç–µ –∫–µ—Ä—É–≤–∞—Ç–∏ –±–æ—Ç–æ–º, –Ω–∞–¥—ñ—Å–ª–∞–≤—à–∏ –∫–æ–º–∞–Ω–¥–∏ –∑—ñ —Å–ø–∏—Å–∫—É /help\n\nCopyright ¬© 2022 <a href="https://t.me/baklai">Baklai</a>. Created by Dmitrii Baklai.`;
  bot.sendMessage(id, message, { parse_mode: 'HTML' });
});

bot.onText(/\/msg (.+)/, async (msg, match) => {
  const resp = match[1];
  const users = await User.findAll();
  users.forEach((user) => {
    let message = `üëã <b>–í—ñ—Ç–∞–Ω–Ω—è <i>${user.firstName}</i></b>!\n\n<i>${resp}</i>\n\nüëâ –¢–∏ –º–æ–∂–µ—à –∫–µ—Ä—É–≤–∞—Ç–∏ –±–æ—Ç–æ–º, –Ω–∞–¥—ñ—Å–ª–∞–≤—à–∏ –∫–æ–º–∞–Ω–¥–∏ –∑—ñ —Å–ø–∏—Å–∫—É /help`;
    bot.sendMessage(user.userID, message, { parse_mode: 'HTML' });
  });
});

bot.onText(/\/cancel/, (msg) => {
  api.cancelAction(msg);
});

bot.onText(/\/categories/, (msg) => {
  api.getCategory(msg);
});

bot.onText(/\/newcategory/, (msg) => {
  api.newCategory(msg);
});

bot.onText(/\/editcategory/, (msg) => {
  api.editCategory(msg);
});

bot.onText(/\/deletecategory/, (msg) => {
  api.deleteCategory(msg);
});

bot.onText(/\/products/, (msg) => {
  api.getProducts(msg);
});

bot.onText(/\/newproduct/, (msg) => {
  api.newProduct(msg);
});

bot.onText(/\/editproduct/, (msg) => {});

bot.onText(/\/deleteproduct/, (msg) => {});

bot.on('message', async (msg) => {
  const { id } = msg.chat;
  const isBot = api.isBot(msg);
  const action = api.getAction(id);
  if (action && !isBot) {
    try {
      api[action.type](msg);
    } catch (err) {
      api.delAction(id);
      bot.sendMessage(id, 'üí¢ <b>–£–ø—Å!</b> –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫!', {
        parse_mode: 'HTML'
      });
    }
  } else if (!isBot && !msg.web_app_data) {
    bot.sendMessage(
      id,
      '‚úåÔ∏è –î—É–∂–µ —Ü—ñ–∫–∞–≤–æ, –∞–ª–µ —è –ø–æ–∫–∏ —â–æ –Ω–µ –≤–º—ñ—é –≤–µ—Å—Ç–∏ —Ä–æ–∑–º–æ–≤—É!',
      {
        parse_mode: 'HTML'
      }
    );
  }
});

bot.on('callback_query', async (query) => {
  const { id } = query.message.chat;
  const action = api.getAction(id);
  if (action) {
    try {
      api[action.type](query);
    } catch (err) {
      api.delAction(id);
      bot.sendMessage(id, 'üí¢ <b>–£–ø—Å!</b> –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫!', {
        parse_mode: 'HTML'
      });
    }
  } else {
    bot.sendMessage(id, '‚úåÔ∏è –î–∏–≤–Ω–æ, –∞–ª–µ —è –Ω–µ –∑—Ä–æ–∑—É–º—ñ–≤, —â–æ –≤—ñ–¥ –º–µ–Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ!', {
      parse_mode: 'HTML'
    });
  }
});

bot.on('web_app_data', async (msg) => {
  const { id } = msg.chat;
  const { order, price, comment } = JSON.parse(msg.web_app_data.data);
  let message = '';
  if (order) {
    message = 'üîñ <b>–í–∞—à —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤:</b>\n';
    for (const key in order) {
      message += `\n<b>${key}</b>\n`;
      order[key].forEach((item, index) => {
        message += `   <b>${index + 1}</b>. ${item.title} (<b>${
          item.count
        }x</b>) - <i>${item.pricePer} ${item.priceTitle}</i>\n`;
      });
    }
    price ? (message += `\n<b>–í–°–¨–û–ì–û:</b> ‚Ç¥${price}`) : (message += '');
    comment
      ? (message += `\n<b>–í–∞—à –∫–æ–º–µ–Ω—Ç–∞—Ä:</b> <i>${comment}</i>`)
      : (message += '');
  } else {
    message = 'üó£ <b>–í–∞—à –ø–µ—Ä–µ–ª—ñ–∫ —Ç–æ–≤–∞—Ä—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π!</b>';
  }
  bot.sendMessage(id, message, { parse_mode: 'HTML' });

  // –≤—Ä–µ–º–µ–Ω–Ω–æ
  await User.createOne(msg.chat);
});

module.exports = bot;
