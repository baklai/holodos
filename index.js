/*
 * Holodos Telegram Bot
 * Copyright(c) 2022 Dmitrii Baklai
 * MIT Licensed
 */
process.env.NTBA_FIX_319 = 1;

const path = require('path');
const dotenv = require('dotenv');
const TelegramBot = require('node-telegram-bot-api');

dotenv.config({ path: path.join(__dirname, '.env') });

if (dotenv.error) {
  console.error(dotenv.error);
  process.exit(1);
}

const { TELEGRAM_TOKEN, PROXY_SERVER, WEB_APP_URL } = process.env;

const bot = new TelegramBot(TELEGRAM_TOKEN, {
  filepath: false,
  polling: {
    interval: 300,
    autoStart: true,
    params: { timeout: 10 }
  },
  request: {
    proxy: PROXY_SERVER ? PROXY_SERVER : null
  }
});

bot.on('polling_error', function (err) {
  console.error(err.code);
});

const form = {
  menu_button: JSON.stringify({
    type: 'web_app',
    text: 'üëâ –û—Ç–∫—Ä—ã—Ç—å —Ö–æ–ª–æ–¥–æ—Å',
    web_app: { url: WEB_APP_URL }
  })
};

bot
  .setChatMenuButton(form)
  .then(function (msg) {
    msg ? console.log('Telegram Bot is running...') : process.exit(1);
  })
  .catch(function (err) {
    console.error(err);
  });

bot.onText(/\/start/, function (msg) {
  const { id } = msg.chat;
  const html = `<b>–ü—Ä–∏–≤–µ—Ç <i>${msg.from.first_name}</i></b>!\n\n<i>–Ø –ø–æ–º–æ–≥—É —Å–¥—É–ª–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø–æ—Ö–æ–¥–∞ –≤ –º–∞–≥–∞–∑–∏–Ω –ø—Ä–æ—â–µ, –±—ã—Å—Ç—Ä–µ–µ, –∏ —á—Ç–æ —Å–∞–º–æ–µ –≥–ª–∞–≤–Ω–æ–µ, —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ.</i>\n\nüëá –û—Ç–∫—Ä–æ–π —Ö–æ–ª–æ–¥–æ—Å, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å...`;
  bot
    .sendMessage(id, html, {
      parse_mode: 'HTML'
    })
    .catch((err) => {
      console.error(err.code);
      console.error(err.response.body);
    });
});

bot.on('web_app_data', function (msg) {
  console.log(msg);

  const data = JSON.parse(msg.web_app_data.data);
  if (data.length > 0) {
    let html = '<b>–°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:</b>\n';
    data.forEach((el, index) => {
      html += `<b>${index + 1}</b>. ${el}\n`;
    });
    bot.sendMessage(msg.chat.id, html, { parse_mode: 'HTML' }).catch((err) => {
      console.error(err.code);
      console.error(err.response.body);
    });
  } else {
    let html = '<b>–°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø—É—Å—Ç!</b>';
    bot.sendMessage(msg.chat.id, html, { parse_mode: 'HTML' }).catch((err) => {
      console.error(err.code);
      console.error(err.response.body);
    });
  }
});

// bot.on('1100', (query) => {
//   console.log(query);
// });

// bot.answerWebAppQuery('1100', result).then(function (msg) {
//   console.log(msg);
// });
